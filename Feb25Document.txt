oops.conceptsDay 1 (07/10/2024)
* Eclipse basic
	* disadvantages of accessing and running a file using cmd promt
	* Eclipse is a 
		* Editor tool
		* it gives us a simple but advanced UI to view, edit and run our files in a very easy way.
		
Eclipse alternate tool - inteliJ, STS (Sprint tool suite), Visual Studio Code
		
*************************************************************************
Day 2 (08/10/2024)

Taluk office - class
rooms - methods/functions

Reception related things(table, phone, receptionist, computer) - static - belongs to the class

Paper, pen, water can, water bottle, table, chairs, chalan - anyone can access - public
Receptionist mobile, person's mobile/money/bike - private
Documents, rooms  - protected
People - default

Access Modifier - public, private, protected and default

Variables
    10 people/chair/table or 20 people/chair/table or 5 people/chair/table
	- (10, 20 and 5)- variable values
	- people/chair/table - type- datatype
	- red table, red chairs or white chairs - naming - variable name

	chair redColor = 30;  --camel case format - myNameIsSathya - mynameissathya
	chair - datatype
	red - variable name 
	30 - variable value 
public chair red = 20;
private chair red = 2; 

VARIABLE COMMON SYNTAX 
	accessModifer datatype variableName = variableValue;


Method - room- specific work
	* Whatever happens inside is not visible to outside or other methods/rooms
	* We can bring things from reception/hall to a method
	* But we can not bring a thing from method/room to outside. In order to do that, we need to follow a process
		- RETURN TYPE
	* Most of the time method wont give us anything - VOID 

METHOD COMMON SYNTAX 
	- AccessModifer returnType methodName() { }
	- public/private/protected void incomeTaxCertificateProcess() {
		
		}
	-  void incomeTaxCertificateProcess() {
		
		}

Taluk office - Class
	- It does a set of works
	- Methods are written inside a class

CLASS COMMON SYNTAX 
	- AccessModifier class(keyword) ClassName { }
	- public class TalukOffice {

		}
	
public class TalukOffice {
                                     
public chair red = 20;
private chair red = 2; 
protected table wooden = 5; 
table plastic = 10;
public person token21 = "Karthick";
     

	- public void incomeTaxCertificateProcess() {
		 fdjshjfksk
		 fdjshfjs
		 fdjshj
		}
	- public void MarriageCertificateProcess() {
		
		}

public chair red = 20; //can be written within the class but outside the methods 
private chair red = 2;


	- private void staffRoom() {

		}
	- protected void importantDocumentsRoom() {

		}
		
	- default void washRoom() {
	
		}
		
	- void washRoom1() {
	
		}

public chair red = 20;
private chair red = 2; 
	
}

* incomeTaxCertificateProcess - camelCase
	- class names should start with CAPITAL LETTER and followed by camelCase
	- method/variable names should start with SMALL LETTER and followed by camelCase
	- all the java keywords starts with SMALL LETTER such as class, access modifiers(e.g:public), void etc.


People administration - package
Chennai Taluk office - Class - parent class
	below are sub classes of Chennai Taluk office 
	- Velachery Taluk office - Class 
		- Velachery east Taluk office - Class (He is sub class of Velachery class)
	- Tambaram Taluk office - Class
	- Guindy Taluk office - Class 

Chennai Taluk Office - Parent/Super class
Velachery Taluk Office - Parent class
Velachery East Taluk Office - Child/Sub class 

public class ChennaiTalukOffice {}
public class VelacheryTalukOffice extends ChennaiTalukOffice { }
public class VelacheryEastTalukOffice extends VelacheryTalukOffice { }

We need someone or some office to create rules so that by using that every taluk office will work
For that, in Java, we use Interface 

We create rules in interface

COMMON SYNTAX FOR INTERFACE 
	- AccessModifier interface(Java keyword) InterfaceName { }
	- public interface PeopleAdministrationRules {
	
	}
	
public interface ChennaiTalukRules {

 public void MarriageCertificateProcessRules();

	public void IncomeCertificateProcessRules();

}

**************************************************************
Day 3 (09/10/2024)


public interface PeopleAdministrationRules {
	
	public void incomeCertificateProcess();

	public void marriageCertificateProcess();
	
	}

public interface ChennaiEastPeopleAdminRules { 
	}


public interface ChennaiNorthPeopleAdminRules extends PeopleAdministrationRules { 
	}

public class ChennaiTalukOffice implements PeopleAdministrationRules {

}

public interface PeopleAdministrationRules implements ChennaiTalukOffice {

}


class follows class - extends 
interface follows interface - extends 
class follows interface - implements 
interface follows class - NOT POSSIBLE


same entity - extends 
different entity - implements

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ChennaiGovtHospital conducts medical camp inside the campus 
	- This event equal to Object Creation or Object Initiation or Object Instantiation in Java
	
Things to remember when you say Object or Object creation	
Class
Copy
non-static
multiple objects for a single class are also possible
created for same class or created in different class 

OBJECT CREATION SYNTAX 
AccessModifier ClassName objectName/ObjectName = new  ClassName();


ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
ChennaiGovtHospital BloodDonationCamp = new ChennaiGovtHospital();
ChennaiGovtHospital EyeTestCamp = new ChennaiGovtHospital();

public class ChennaiGovtHospital {
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
	ChennaiGovtHospital EyeCamp = new ChennaiGovtHospital();
	ChennaiGovtHospital DentalCamp = new ChennaiGovtHospital();
}

public class ChennaiPoliceStation { 
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Medical camp conducted by ChennaiGovtHospital is managed by a Clerk

This Clerk is equal to "CONSTRUCTOR" in java
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
		- ChennaiGovtHospital() - Constuctor

CONSTRUCTOR COMMON SYNTAX 
	- AccessModifier ClassName() { }
	- public ChennaiGovtHospital() { 
		}
		
METHOD SYNTAX
	- AccessModifier returnType methodName() {  }
	public void marraigeCertificateProcess() {
	}
	

1) Constructor do not have return type;
2) Constructor name should be as same as Class Name;
3) By default, each class has its own Constructor and we call it as DEFAULT CONSTRUCTOR;


STATIC  - keyword
		- belongs to the class
		
	
	Reception chair, reception telephone, reception table, receptionist
	
Taluk Office receptionist

Within Class(Taluk Office) - receptionist - directly we can call them

Outside
Outside of Taluk Office and within PoliceStation - 
	- We call the TO receptionsit as TO receptionist
	- POlice Station receptionist
	
public chair red = 10 - non-static
static public chair red = 10;
public static chair red = 10;

public static void method1() {   }
static public void method2() {   }

public static class ClassName {   } - NOT POSSIBLE


Methods
static
Class
Access Modifier
Variables 
Package
Project
Interface
Object Creation
Constructor


ChennaiAdminstration - Project 
PeopleAdminstration - package
	ChennaiTO - class
	PeopleAdministrationRules - interface
	VelacheryTO - class
	VelacheryEastTO - class
	TambaramPeopleAdminRules - interface
	TambaramTO - class
	dummyDocument.txt
	Data.xls

HealthAdminstraction - package
	ChennaiGH - class
	HealthAdminRules - interface
	ChennaiNorth - class
	Chennai South - class
	HealthAdminRulesNorthAndSouth - interface
	
ChennaiBluePrint.txt
MyDocuments - folder
	
	

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Project Structure 

Project
    sourceFolder
	- package1
		InterfaceA
		InterfaceB
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
		Files1
	- package2
		ClassA
		ClassB
		InterfaceC
	- package3
		ClassX
		ClassA
	Files2
	Folders
	

*************************************************************
Day 4 (10/10/2024)

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does specific job. It always written inside a class/interface

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - defines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interfacebject

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder


	* src/main/java
	* src/main/resources
src/main - development related codes and its supporting files
		
	* src/test/java
	* src/test/resources
src/test - test case or testing related codes and its supporting files

	


* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. 
                 We can not seperate them. variables and methods can be static
			within a class - static can be used anywhere directly in the same (in a static method or in non-static method)
			Outside class - static can be used but alone with class name. (in a static method or in non-static method)

* Object (Creation or instantiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/document
				2. only with money
				3. only with document
				4. with both money and document


*************************************************************

Day 5 (14/10/2024)

*****https://www.shellhacks.com/git-create-new-branch/****

Git basics

Git alternative tool - bitBucket, Azure, AWS

* helps to work on a same file by multiple person. 
* SCM - Source code management 

Original project is in our system, we use Eclipse to view and edit the project in easy manner

File Explorer view of our project - Local
Git view of our project - Remote 

Git Repository - Repo- Remote - Remote project

1) Create a Java project 
2) Add some packages and classes and some files 
3) In github.com, create a repository
4) In File explorer, go to your Java project 
5) From there open git bash andd type below commands
	* git init -- it will create a local git with master branch
	* git add .
	* git commit -m "some messages"
	* git remote add origin "repository's SSH path" - we are introducing online repository to local git 
	* git push origin master
	* git status
	* git config --global user.email "";
	* git config --global user.name "";
	
Need to add ssh token of your Eclipse into your Github
To generate the ssh key in Eclipse 
	Go to window -> preferences -> search for SSH
	click SSH2
	Go to keyManagement
	generate RSA token 
	save it in the default path (which would be .ssh folder in your system)
	Open the .ssh folder 
	open the pub file in notepad 
	copy  the ssh-rsa entire string
Go to gihub
	Your profile -> Settings -> SSH settings ->
	click Add new key
	Give title and paste the key
	save it
	
Now you can push your files easily 
	
	
**********************************************************
Day 6 (15/10/2024)

Maven - Dependencies management tool

other such tools - Gradle, ant

	* Difficulties in adding a .jar file into our project, downloading the dependencies or upgrade/degrading it
	* .M2 folder stores the dependencies added in pom.xml file
	* Maven projects gives us a proper project structure
	
resolution:-
	* Instead of Java project, create a maven project
	* All maven project consist pom.xml file
	* In pom.xml file, we add the required dependencies
		* groupId
		* artifactId
		* version
		* scope (optional)
	* Eg:-
		OnePlus - GroupID 
		Mobile - ArtifactID
		OnePlus11R - Version
	* Eg:-
		GroupID - selenium.org
		ArtifactID - selenium-java
		version - 4.20.1
		
* Home work
	* Create Maven project
	* push to git repo using git bash
	* delete project from your system
	* By using eclipse import the project directly from git(without RSA)
	* Add RSA and then import directly from git
	* Download the project from 
		* https://github.com/SathiyamoorthiMurugesan/ABC
		* Import this project into eclipse
		

1. Create a local project (add all the required files)
2. In github, create a repo
3. Open git bash from your project location
4. git init 
5. git add .
6. git commit  -m "message"
7. git remote add origin "git repo link"
8. git push -u origin master


		
************************************************************************************

Day 7 (16/10/2024)
		
Different ways to import a maven project into Eclipse 
	* clone the project using git bash and import the existing project into Eclipse 
	* clone the project using eclipse and followed by import the existing project into Eclipse
	* clone the project in git perspective and import the existing project into Eclipse
	* download the project into your local and import the existing project into Eclipse
	
How to import a project from repository to your local(your system) - using eclipse alone 

1. You should be having access to the repository(repo) you are going to clone.
2. Ask the repo owner to add you as a collabarator to that repo. 
3. Go the the repo in github
4. Click on code and copy the ssh path 
5. Open Eclipse 
6. File -> import or in package Explorer, right click on the empty space and click on import.
7. Select Git -> Project from git -> next 
8. Select repo source -> clone url
9. Source git repo - paste the URI (usally it will be pasted automatically, if you have copied the ssh url then no change are needed) -> next
10. Branch selection - choose what the branches you want -> next
11. Local Destination - path will come automatically(recommended). if you want to change you can change otherwise dont -> next
(After the above step, in your local, you can see the project.)
12. Select Wizard -> choose import existing eclipse project  

How to import a project from repo to your local using git bash and eclipse 
1. You should be having access to the repository(repo) you are going to clone.
2. Ask the repo owner to add you as a collabarator to that repo. 
3. Go the the repo in github
4. Click on code and copy the ssh path 
5. Open git folder from user directory (c:/user/username/)
6. Open Git Bash
7. Type git clone "copied ssh uri"
8. Now you can see the project in git folder in your local 
9. Open Eclipse
10. File -> import -> select maven - existing maven project ->next 
11. Choose the project path (c:/user/username/git/YourProjectName) -> next
12. On the next page click finish
13. Now you can see the project in your eclipse

How to import a project which is available in your system
1. Open Eclipse
2. import 
3. Maven -> Existing maven projects -> next
4. Choose the project path where you kept your downloaded project -> next
5. On the next page click finish
6. Now you can see the project in your eclipse

Below line is for demonstrating the Eclipse git
Hello Eclipse

git cheat sheet
https://www.geeksforgeeks.org/git-cheat-sheet/
 
	
* What is .gitignore file and how it works 

* How to access build path of a project

* How and why to update the maven project

* Run as 
	* Maven clean
	* Maven install
	
* In src/main/java
	* We keep development related files
* In src/main/resources
	* We keep utility files which is being used in development files
* In src/test/java
	* We keep test case files
* In src/test/resources
	* We keep utility files which is being used in test cases

* Create a Maven project, push it into Git and add collaborators

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


How to bring already existing project into your workspace/system

1. Copy the SSH of the git repo.
2. Eclipse - File - import - Project from Git
3. Clone URI
4. git@github.com:nirmalnehru2000/Second-sample.git
5. Choose branches to be cloned - choose all the branches
6. Path will be created in your local system. (git folder)
7. Choose the initial branch - master 
8. Select wizard - import existing eclipse project
9. Finish

Check git perspective 
window - perspective - others - git 

1. How to clone a project - using eclipse 
2. How to pull a change from a project branch into your local branch
3. How to import a existing maven project into your eclipse view 
4. How to clone a project - using git bash 


************************************************************************************

Day 8 (17/10/2024)

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work - 10 lines of codes
Method2 - B work - 10 lines of codes
Method3 - C work ( A work + some other work = method1 + some other work)
				 (	
No duplicate codes
redundant - repeatable 
reuse
No. of line will reduce 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Variables

Variables - shape and count/name
shape - datatype 



Syntax:-
	AccessModifier datatype variableName = variableValue
	public int a = 10;
	private String b = "xyz";
	
	people red = 10;
	people orange = "Sathya";
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Datatype: Its a classification of a data, which tells the compiler or interpreter 
about how the programmer intends to use the data.

Syntax of variables
AccessModifier datatype variableName = variableValue

1) Primitive
	a) boolean - yes or no OR true or false 
		* boolean aa = true; --> Variable declared and initialized
		* boolean ab;  --> Variable declared but not initiated.
			- default value will be assigned to ab is "false";
		* boolean cc;
			cc = true;
	
	b) Textual 
		1) char - a, b, c, A, B
			* char ba = 'a';
			* char bb = '1';
			* default value of char is null;
		2) byte - 
			byte x = 10;
	c) numeric 
		1) int 
			* int cc = 10;
			* default value = 0;
		2) short
			* short dd = 20;
			* default value = 0;
		3) double
			* double ee = 30d;
			* default value = 0;
		4) long
			* long ff = 20l;
			* default value = 0;
		5) float
			* float gg = 2.5f;
			* default value = 0;
			
Data Type	Description
byte	Stores whole numbers from -128 to 127
short	Stores whole numbers from -32,768 to 32,767
int		Stores whole numbers from -2,147,483,648 to 2,147,483,647
long	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double	Stores fractional numbers. Sufficient for storing 15 to 16 decimal digits
boolean	Stores true or false values
char	Stores a single character/letter or ASCII values

2) Non Primitive
	d) String - In java, String is a Non-Primitive data type but at the same time its a Class.
		* String hh = "aA10@";
		* String ii = "In java, String is a Non-Primitive data type but at the same time its a Class.";
		* String jj = "null";
		* default = null;
	e) array
	
int a; - declare
a = 10; - define/initiate/assign
int a = 10 - declare and initiate

int a = 10;
default - access modifier
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable

If you want 10, you need to call 'a' only. 

***************************************************************

Day 9 (18/10/2024)

How to create a class, nested classes with different access modifiers
How to create a interface, nested interfaces with different access modifiers
How to create non-static methods and static methods 
How to create variables 

********************************************************************

Different variables
How to create/call variables inside a method

Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* Datatype declared/initiated within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* initialization of local variable is mandatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	c = '2';
	String sathya = "10";
	static int b = 10; -- we can not create like this.
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object for that class
	
	classA {
	int a = 10; //class level non static variable
	String sathya = "10"; //class level non static variable
	
	method1() {
	int  aa = 10; // local variable
	
	sysout(sathya); // we can not use a non static like this. we need to create object
	// it should be written as 
	ClassA obj = new ClassA(); //object creation
	sysout(obj.a);
	}
	
	}
	
	
3. static variable
	* Declared within a class but outside of a block with "static" keyword
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	public static int c = 200;
	
ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {
	print (a);
}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}

**************************************************************************

*********Calling methods **********

A work - method1(); -- 100 lines of codes

B work - method2(); -- 100 lines of codes

C work - method3(); -- 250 lines of code 
	method3() is method1() + method2() + some other work

- Reuse of methods 
- duplicates and redundant codes - remove

AS OF NOW, WE HAVE SEEN TWO KIND OF METHODS
1. static methods 
2. non-static methods

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//	We can create object of a class in another class 
//		* (eg: creating object for Class22 inside of CallingMethods1)
	
//	For reference: 
//		* Which method you are going to call is matters
//		* Which class you are going to call also matters
//		* static methods/variables always belongs to the class
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
//	With in A class
//		* Calling a static method from non-static method 
//				- Direct
//		* Calling a static method from static method 
//				- Direct
//		* Calling a non-static method from non-static method 
//				- Direct/ Object Creation
//		* Calling a non-static method from static method 
//				- Object Creation
	
//	withInAClass(from)		static			non-static
//	non-static              DIRECT          DIRECT/OBJECT CREATION
//	static 				    DIRECT          OBJECT CREATION
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

	
//	Outside a class
//	* Calling a static method of another class from non-static method 
//			- ClassName + static method name
//	* Calling a static method of another class from static method 
//			- ClassName + static method name
//	* Calling a non-static method of another class from non-static method 
//			- Object Creation
//	* Calling a non-static method of another class from static method 
//			- Object Creation
	
//	OutsideOfClass		static			   non-static
//	non-static          CLASSNAME          OBJECT CREATION
//	static 				CLASSNAME          OBJECT CREATION
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
//	CONCLUSTION
//	When you are going to call a 
//		* Non-static - Object Creation
//		* static - direct(within a class) or along with class name (outside of class)



************************************************************************
Day  - 03/03/2025

Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	Syntax = accessModifier dataType variableName/variable = variableValue (Could be local variable or non-static variable)
		   = static accessModifier dataType variableName/variable = variableValue (class level variable or static variable)
		   
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	package1
		classA ( int a = 10)
			ClassB (same package of ClassA and sub class of ClassA)
		classC (same package but non sub of ClassA)
	package2
		classE (diff package and non sub class of ClassA)
		classD (diff package and sub class of ClassA)
		
	
How ClassA and other Classes can use variable 'a' based on its access modifier.

classA                                 				| default (int a = 10)  |  private (int b = 20) | protected (int c = 30) | public (int d = 40)
													 
classA 				                				| yes     				| yes       			| yes        			 | yes
									 				        
same package but sub class (classB)	 			 	| yes     				| no        			| yes        			 | yes 
									 				
same package but NON sub class (classC) 			| yes     				| no        			| yes        			 | yes
									 				
different package but sub class (classD)			| no      				| no        			| no         			 | yes
									 				
different package but NON sub class (classE)		| no      				| no        			| no         			 | yes

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JVM, JRE, JDK

our codes - English - .java
compile - .class - byte code (machine recognizable language). 
			it is available in target folder.


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method and executes the codes inside the main method
* It creates the code flow, in java the flow is called "Thread"  - "main Thread"
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java keywords
new, class, interface, abstract, all the access modifiers, data types, static, this, super, throw, throws, try, 
catch, final, finally, data type, if, for, while, break, continue, switch, case;

* dont create variables and method names using java predefined keywords 
* Java is case sensitive language (Sathya, sathya)
* java is a OOPs(Object Oriented Program) language
	* Java is not a 100% OOPs language

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, method name
* should start with small letter followed by camel case

if you are creating class or interface or Object
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName

package, method, object, variable - starts with small letter
Class, Interface, Object - starts with Capital letter

************************************************************************************

Day 13 - 04/03/2025

Day 14 - 05/03/2025

parameterized methods using int, String 

how to bring a local variable value outside of the method

*************************************************************************************

Day 15 - 06/03/2025

Object creation in detail


**************************************************************************************

Day 16 - 07/03/2025

Memory management in Java

Return type in Java

**************************************************************************************

Day 17 - 08/03/2025

Return type in Java - class 2


**************************************************************************************

Day 18 - 10/03/2025

Return type in Java - class 3

and multiple parameters and multiple return types

**************************************************************************************

Day 19 - 11/03/2025

Class or interface as a parameter 

HomeWork

How to read a property file or any file using Java

**************************************************************************************

Day 20 - 12/03/2025

How to read a property file or any file using Java - explanation the concept in the each line 

public class ReadPropertyFile {
    public static void main(String[] args)  {
        String filePath = "config.properties"; // Specify the property file path
        FileInputStream fileInput = new FileInputStream(); // Open the file
        Properties properties = new Properties();
        properties.load(fileInput); // public void load(FileInputStream a);
      //  properties.load(10); //public void load(int a); 
        fileInput.close(); // Close the file
        
      //  FileInputStream obj = new FileInputStream(); 
       //obj.close(); 
      //  close();

        // Access property values
        String value1 = properties.getProperty("abc");
        String value2 = properties.getProperty("key2");
        
  //      String value1 = properties.getProperty("a");  // public String getProperty(String abc) { }
        
    //    String packageName.Properties.getProperty(String abc) 
        
     //   System.out.println("Player1 name is : " + value1);
     //   System.out.println("Player2 name is : " + value2);
        
        syso(value1);  Key1: 10
        syso(value2);  Key2: 20
    }
    }
    
    
TeamMember.properties

abc = "Sathya";
xy = "Mani";

Player1: Sathya
Player2: Mani

**************************************************************************************

Day 21 - 13/03/2025

Final variable in Java

Constructor basics

**************************************************************************************

Day 22 - 14/03/2025

Constructor basics - class 2

**************************************************************************************

Day 23 - 17/03/2025

Before this class go through all the previous classes, importantly Final variable and SCP concept

Final variable with Constructor.

String basics
String immutable

*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

TOPICs WE LEANRED TILL NOW

Class
Interface
variables
Access Modifier
static
Method
	static or non-static 
	parameter or without parameter
	return type or without return type
Data type - Variables
	Local Variable
	Non static variable
	static variable
Object Creation
Constructor
Final variable
String basic and String immutable, why?

**************************************************************************************

Day 24 - 19/03/2025

Constructor with Final - explain in words

Interface in detail

**************************************************************************************

Day 25 - 20/03/2025

How to call interface body methods (static, private and default(explicitly mention) 

Abstract class basic

**************************************************************************************

Day 26 - 21/03/2025

How to call Abstract class methods 

**************************************************************************************

Day 27 - 22/03/2025

Is Java OOPs language? explain?

OOP - Object oriented programming
Java is not 100% OOPs language
Because of primitive data types - they are not object

OOPs concepts
	* Encapsulation - En + capsule + lation... block - {  } 
	* Abstraction
	* Inheritance in detail
	* Polymorphism
		* Overloading - compile time polymorphism
		* Overriding - run time polymorphism
		
Different type of Object creation

Multiple inheritance

**************************************************************************************

Day 28 - 25/03/2025

Multi-level inheritance

examples of Java, selenium for Multiple and Multilevel inheritance

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Polymorphism in detail
	Overloading
	Overriding
	
Method Signature

Overloading in detail

**************************************************************************************

Day 29 - 26/03/2025

Overriding in detail

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Overriding in Java

1. Overloading - Compile time polymorphism
	1. Within the class or same class 
	2. Method name should same
	3. No. of parameter, type of parameter and order of parameter


2. Overriding - Runtime polymorphism
	1. Between two classes 
		* Those two classes should be in a relationship (Parent and child) - Inheritance
	2. method name should be same
	3. method parameters also should be same
	4. Object creation plays an important role

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Keywords in Java

static
final
Understanding println() method


**************************************************************************************

Day 30 - 27/03/2025

final
Understanding println() method
main method understanding

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java keywords 
this and this();

**************************************************************************************

Day 31 - 31/03/2025

this and this();
super and super(); 

***********************************************************************************

Day 32 - 1/04/2025

Constructor in detail

1) should not have return type
2) Cons. name should be same as class name and belongs to the class
3) each class has a default cons. and its present implicitly
4) during obj creation constructor call would happen
5) Constructor can not be static 
6) Cons. is private, we can not create obj of class in other classes
7) We can parameterize constructor
8) inside constructor we can call methods and create variables
9) within a class, we can use this() to call one cons. from other
10) every child class cons. has super() as a first line of code, in order to call the parent default cons.
11) We can create a final variable without initiating but we need to initialize in all the constructors
12) When default cons. is implicitly present and we create a parameterized cons., then default cons. will vanish.

Blocks in Java

static block in java


***********************************************************************************

Day 33 - 4/04/2025

Exception handling 

Errors and Exception

***********************************************************************************

Day 34 - 5/04/2025

Throw and Throws Exception in Java

Custom Exception

***********************************************************************************

Day 35 - 6/04/2025

if condition

***********************************************************************************

Day 35 - 7/04/2025

for loop in java

Homework - Java pattern related coding questions.

1. Nested for loop. Parent loop for - row; child loop for column
2. temp variable 
3. Println or print 
4. where and when to use break
5. initialization of parent for loop
6. initialization of child for loop
7. condition used in parent for loop
8. condition used in child for loop
 
***********************************************************************************

Day 36 - 10/04/2025

for loop patter revision

1
 2
  3
   4
    5
    

for(int i = 1; i<=5; i++) {

for(int j = 1; j<=5;j++) {
	if(i==j) {
	System.out.print(j);
	break;
	}
	else
	System.out.print(" ");
	}
	System.out.println();

} 


***********************************************************************************

Day 37 - 10/04/2025

Debugging 

switch condition


***********************************************************************************

Day 38 - 11/04/2025

For loop patter discussion


***********************************************************************************

Day 39 - 15/04/2025

while loop
and 
do while loop

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Scanner class 

array basic

***********************************************************************************

Day 40 - 16/04/2025

array in detail

Home work 
array programming questions. 
	1. Sorting an array
	2. find the largest number in an array
	3. find the second largest number in an array
	4. reverse an array
	

***********************************************************************************

Day 41 - 17/04/2025

 **Java array programming questions** (without using any Collections like `ArrayList`, `HashMap`, etc.). 
 These are useful for interviews and practice, especially when you're restricted to core array operations.

---

### 🔰 **Beginner Level**
1. **Find the maximum and minimum elements in an array.**
2. **Reverse an array.**
3. **Find the sum of all elements in the array.**
4. **Find the average of array elements.**
5. **Check if an array contains a specific value.**
6. **Copy all elements of one array into another.**
7. **Count the number of even and odd elements in an array.**
8. **Merge two arrays into a third array.**
9. **Find the second largest and second smallest elements.**
10. **Left rotate an array by one position.**

---

### 🔁 **Intermediate Level**
11. **Sort an array without using built-in sort functions (e.g., Bubble Sort, Selection Sort).**
12. **Remove duplicate elements from an array.**
13. **Insert an element at a specific position in the array.**
14. **Delete an element from a specific position in the array.**
15. **Find the frequency of each element in the array.**
16. **Find common elements between two arrays.**
17. **Find the missing number in a sequence of `n` numbers.**
18. **Check if two arrays are equal (same elements and order).**
19. **Shift all zeroes to the end of the array.**
20. **Separate positive and negative numbers in an array.**

---

### 💡 **Advanced Level**
21. **Find the subarray with the maximum sum (Kadane's algorithm).**
22. **Check if the array is a palindrome.**
23. **Find all pairs in the array whose sum equals a specific number.**
24. **Rotate the array by `k` positions.**
25. **Find the majority element (element that appears more than n/2 times).**
26. **Rearrange array so that even indices have even numbers and odd indices have odd numbers.**
27. **Find the intersection and union of two arrays.**
28. **Move all negative elements to one side of the array.**
29. **Find the longest increasing subsequence in the array (without Collections).**
30. **Find the first non-repeating element in the array.**

	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

For Each loop details

***********************************************************************************

Day 42 - 18/04/2025

jagged array 
multi dim array

String class in detail

Home work 

1. Learn array and programming questions
2. Arrays class 
3. String methods
4. String interview program questions

***********************************************************************************

Day 43 - 20/04/2025

Thread concept

StringBuilder and StringBuffer

String programming interview questions without using collections.

Arrays

***********************************************************************************

Day 44 - 21/04/2025

String interview questions

1) reverse a string - 5 technique
2) count total words  in a sentence
3) reverse each words in a sentence
4) count each words/letters in a sentence or word respectively

***********************************************************************************

Day 45 - 22/04/2025

getters and setters

Wrapper class

Why Java is not 100% OOPs language is because of primitive data types.

Wrapper classes 
int - Integer
char - Character
double - Double
boolean - Boolean

Homework 
1) How to read text file 
2) How to read property file 
3) How to read excel file (using apache poi and using fillo api)
4) also for the above 3, write generic methods 
5) How to create a folder, file or excel using Java

***********************************************************************************

Day 46 - 28/04/2025

Excel reading

***********************************************************************************

Day 47 - 29/04/2025

Introduction to collection

Collection Hierarchy

***********************************************************************************

Day 48 - 30/04/2025

ArrayList and HashSet basics


***********************************************************************************

Day 49 - 01/05/2025

ArrayList in detail

***********************************************************************************

Day 50 - 02/05/2025

HashSet in detail

*** Home work****
Count no. of letters in a String
Count no. of words in a Sentence

How to read and write in a property file
How to read a excel using Apache POI API and Fillo API

Interview questions
array, String, Collection 
	* Sort 
	* Reverse
	* Count duplicate
	* Remove duplicate
	

***********************************************************************************

Day 50 - 06/05/2025

HashMap in detail

List - Ordered, allows duplicate and multiple null value is allowed 
	ArrayList<Integer> list = new ArrayList<Integer>();
	List<Integer> list1 = new ArrayList<Integer>();
	
Set - Unordered, does not allow duplicate and only one null is allowed
	HashSet<Integer> set = new HashSet<Integer>();
	Set<Integer> set1 = new HashSet<Integer>();
	

Sathya - TCS 
Nirmal - CTS 
Partha - Wipro

Map 

Map - Interface
HashMap - Class

Key - Value pair

Key - Works like Set 
Value - Works like List 

HashMap<String, String> map = new HashMap<String, String>();
Map<String, String> map = new HashMap<String, String>();


Create a excel with  headers and rows 
Store the headers and given row's values in a map.

Count repeated letters/words in a word/sentence respectively. 
here also you can use map.

a = 2;
b = 1

Sathiyamoorthi - count no. of letters in this word
Pseudocode 
	* seperate each letters in a sentence by using split("") or charAt(index) or toCharArray();
	* now we have a String or char array.
	* declare a an arraylist
	* use two for loops 
	* in parent for loop initalise a variable count = 1;
	* if the letter is not present inside the ArrayList, then only, we will go through child for loop
	* within child for loop, you have to use if condition to check array[i] == array[j]
	* When the above if condition passes
		* increase the count;
	* once you check the each letter,  within parent for loop, add that letter a[i] to an ArrayList

Home work:

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Collections Class

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

How do you read a excel file using apache poi 

Where is the excel is present - path and name of the excel
Which extension to be opened - is it xls or xlsx
Which sheet? identity the sheet using index or name
Which row 
In that row what is the column? 
In that row, in that column is that cell storing String or number? 
	if its number, get numeric cell value
	if its string, get String cell value


1) File file = new File(excelFilePath)
2) FileInputStream fis = new FileInputStream(file);
3) .xls = HSSFWorkbook workbook = new HSSFWorkbook(fis))
		workbook.getSheetAt(0);
   .xlsx = XSSFWorkbook workbook = new XSSFWorkbook(fis))
	workbook.getSheetAt(0);
4)   for (Row row : sheet)
5) 	for (Cell cell : row)

public class ExcelReader {
    public static void main(String[] args) {
        String excelFilePath = "example.xlsx"; // Path to your Excel file
        try (FileInputStream fis = new FileInputStream(new File(excelFilePath));
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {

            XSSFSheet sheet = workbook.getSheetAt(0); // Get the first sheet

            for (Row row : sheet) { // Iterate through each row
                for (Cell cell : row) { // Iterate through each cell in the row
                    switch (cell.getCellType()) {
                        case STRING:
                            System.out.print(cell.getStringCellValue() + "\t");
                            break;
                        case NUMERIC:
                            System.out.print(cell.getNumericCellValue() + "\t");
                            break;
                        case BOOLEAN:
                            System.out.print(cell.getBooleanCellValue() + "\t");
                            break;
                        case FORMULA:
                            System.out.print(cell.getCellFormula() + "\t");
                            break;
                        default:
                            System.out.print("Unknown Cell Type\t");
                    }
                }
                System.out.println(); // Move to the next line for each row
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


*********************************************************
Day 51 (16/05/2024)

* What is Software Testing -SDLC and STLC
* What is manual testing
* What is functional Testing
* What is regression testing
* Where do we need the automation most? Regression.

🧪 Types of Functional Testing:
	Type									Description
Unit Testing					Tests individual functions or methods (often by developers).
Smoke Testing					Basic checks to verify the application is stable.
Sanity Testing					Quick test to check specific functionality after changes.
Regression Testing				Ensures new changes haven't affected existing features.
Integration Testing				Verifies interaction between modules or components.
System Testing					End-to-end testing of the entire application.
User Acceptance Testing (UAT)	Performed by end users to validate business functionality.



What is OS based application (windows/iOS/Linex)
What is Web based Application

What is browser - Basic functionalities in browser 
What is Web-Based application
	* What are the basic operation 
	* What is elements
	
Difference between Web Browser and Web application
	Web Browser
		* Chrome
		* Edge
		* Firefox
		* HTML Browser
		* headleass browser
	Web application
		* Facebook
		* Flipkart
		* HDFC website
		* Jira
	
What and all we see in a browser
	* URL bar
	* Minimize button
	* Maximize button
	* New tab
	* Close 
	* New window
	* Forward
	* Backward
	* Refresh
	
* what are the actions we do on a browser
or
* what are the basic properties of a browser 

browser open
url enter
new tab open
tab close 
min 
max
entire browser close
scroll
zoom
navigate - back, forward, refresh

With in application what do we do

application launch - url type
text enter
button click
check box click
radio box click
drop down
links click
Text read/verify
Tab title
Mouse hover
double click
Right click
Date choose
Drag and drop
File upload
Verification/Assert 
page load speed/time(synchronization)
Keyboard
pop up
	alert
	tab
	web alert like info screen
	Desktop window
frames
wait
WebTable

		
What and all we see in a web application (Textbox, checkbox, drop down, button, radio button, link, text, image, video,..etc)
What are the actions we do in an application (click, write, drag and drop, scroll)


*********************************************************
Day 52 (17/05/2024)

Selenium Basics

Why we need automation - saves Time and Man power
Benefits

Things to be considered before starting web automation.

Different Automation tools and Editor
Automation tools 
	* Selenium
	* UFT (QTP)
	* PlayWrite
	* RPA - Robotic process automation
	
Programming language
	* Java
	* Python
	* .Net
	* Ruby
	* C##
	* TypeScript
	* JavaScript
	
Editor 
	* Eclipse
	* STS - Sprint Tool Suite
	* InteliJ
	* Visual Studio
	
Front end development tools and backend application tools

Front End:
	* HTML
	* CSS
	* Java, JavaScript
	* Angular JS
	* .Net
	
Back End
	* Java/JavaScript/Angular/.Net
	* Database management
	* Cloud
	* Source Code Management tools (SCM) - Git, Bit Bucket, AWS, Azure
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* In manual testing, we do the testing - (we are the tester)
* In Automation, who would work as a tester - WebDriver (it is the automation tester)


What is WebDriver 
* WebDriver - interface
* WebDriver is nothing but us(TESTERs).
* The main properties of a browser are created as methods inside WebDriver interface

* Why WebDriver is created as a interface?

* WebDriver interface methods 
	* Important concepts  
		* return type of findElement(By by) and findElments(By by) and explain why?
		* What is sessionId 
		* What is windowHandle 
		* return type of windowHandle() windowHandles() and explain why?

Selenium Hierarchy
	* SearchContext - interface
	* WebDriver - interface (Basic actions we do on the Browser are written in this interface)
	* RemoteWebDriver - Class
	* ChromeDriver, EdgeDriver, FirefoxDriver, SafariDriver - Class
	
interface SearchContext {
}

interface WebDriver extends SearchContext {

}

class RemoteWebDriver implements WebDriver {

}

class ChromeDriver extends RemoteWebDriver {

}
	
What is the significance of Remote WebDriver?
What is the difference between Chrome Browser and ChromeDriver (likewise other browsers) - We will see it later


************************************************************************************
Day 53 (19/05/2024)

What is WebElement
	* Whatever element you see on a web page is called WebElement
	* It is a interface which follows SearchContext (In Java)

How do you find or interact with a WebElement:

	* WebElements in a web page are represented by HTML tags
	  

	What is DOM in browser
The Document Object Model (DOM) is a programming interface for web documents. 
It represents the page so that programs can change the document structure, style, and content. 
Essentially, the DOM provides a structured representation of the document (as a tree of objects), 
and it defines a way that the structure can be accessed from programs 
so that they can change the document's content, structure, and style.

How do you open the DOM of a web page
	* DOM (right click on a page and inspect or F12 or Ctrl+Shift + I)
	
	* diff types of tags
		* html
		* head
		* body
		* header
		* input
		* div
		* ul
			* li
		* a 
		* svg
		* select (drop down)
			* option
		* frame or iframe (small html)
		* table
			* tr 
			* th
			* td
			
		* <table>
		<body>
			<div>
				<tr>
					<th>
					<th>
					<th>
					<th>
				<tr>
					<td>
					<td>
					<td>
					<td>
				<tr>
					<td>
					<td>
					<td>
					<td>

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

HTML tag structures and attributes

* attributes
	whatever key value pair we see inside any tag is called attributes
	
	<div> - start tag
	
	</div> - end tag
	
	<div key1 = "val1" key2 = "val2" > - start tag
	"text" 
	</div>
	
	where
	div - tagName
	key1, key2 - attributes
	val1, val2 - attribute's value
	"text" - tag's display name

How to find element in a page 

<html>

ancestor(div)
  parent(div)
	parent(ul)
		child(li)
			child(select)
		child(ul)
			child(li)
			child(li)
	parent(ul)
	parent(li)
ancestor(div)
	parent(div)
		child(div)
</html>

ancestor
parent
child
siblings
following ancestor, parent, child, siblings
preceding ancestor, parent, child, siblings
text
contains(text, 'Sathya')


************************************************************************************
Day 54 (20/05/2024)

Locators we see later

XPath basic
	* Explain how the element is placed in xml. From our element to html tag.

XPATH - xml path

two types of xpath

Absolute xpath 
Relative xpath 

1) absolute xpath - like using steps 
	* single slash - /
	* full path need to written - from html
	* /html/body/nav/div/div/ul[1]/li[1]/span

	* If there is a change in UI, the above order will change and we can not find our desired element 
		using the above xpath. 
	* So using this xpath is  NOT RECOMMENDED.
	
2) Relative xpath

Syntax
//tagName[@attributeName = 'value']OR -- Most preferred
//*[@attributeName = 'value'] OR 
//tagName[@attributeName = "value"] 

String xpath = "//tagName[@attributeName = \"value\"]"

************************************************************************************
Day 55 (21/05/2024)

Relative xpath 

basic and simple xpath
and
or
you can also use * instead of tagName
text()
contains with text(), value
contains with @attribute, value
//following::tagName
//preceding::tagName
//ancestor::tagName
//parent::tagName
//child::tagName
//following-sibling::tagName
//preceding-sibling::tagName
We can use numbers along with xpath 

by writing single xpath, you can access multiple elements too (eg: drop down values or menu values)


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//tagName[@attribute = 'value']//following::tagName

When element is not found - we get elementNotFoundException

Why element is not found, because we wrongly identified the element
1) spelling mistake
2) flow mistake
3) xpath wrong
4) timing - synchronization between code run and web page loading

StaleElementException
	* Element is available in DOM but not visible in UI
		
https://www.guru99.com/xpath-selenium.html#text
https://www.guru99.com/locators-in-selenium-ide.html

************************************************************************************
Day 56 (23/05/2024)

How do you open a web site in your system? 

Chrome browser and ChromeDriver difference.

Chrome Browser
What it is: Google Chrome is a web browser used by people to browse websites.

Purpose: It is designed for human interaction, displaying websites, running web apps, and accessing online content.

ChromeDriver
What it is: ChromeDriver is a separate executable that WebDriver (from Selenium, for example) uses to control the Chrome browser.

Purpose: It acts as a bridge between test scripts and the Chrome browser.

Compatibility issue. 

To manage compatibility issue, we have 
WebDriverManager - we will see it later 

WebDriverManager automates all of this. It:

Downloads the appropriate driver version.

Sets the path automatically.

Keeps drivers up to date.


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Selenium - its a tool to automate web application. 

Official website - https://www.selenium.dev/

Selenium 3 and 4 difference

Selenium is written in many languages 
	Java
	Python
	C# (.Net)
	Ruby
	JavaScript
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Selenium Hirarchy 
* SearchContext Interface (findElement, findElements)
* WebDriver Interface ( Basic methods for a browser) 
* RemoteWebDriver Class( all basic methods are implemented here)
* Classes (ChromiumDriver)ChromeDriver, (GeckoDriver)FirefoxDriver, (ChromiumDrier)MS Edge,  etc..


interface SearchContext methods

  List<WebElement> findElements(By by);
  WebElement findElement(By by);
  
interface WebDriver methods 

  void get(String url);
  @Nullable String getCurrentUrl();
  @Nullable String getTitle();
  @Override
  List<WebElement> findElements(By by);
  @Override
  WebElement findElement(By by);
  @Nullable String getPageSource();
  void close();
  void quit();
  Set<String> getWindowHandles();
  String getWindowHandle();
  TargetLocator switchTo(); // TargetLocator - Interface present inside WebDriver interface
  Navigation navigate(); // Navigation - Interface present inside WebDriver interface
  Options manage(); // Options - Interface present inside WebDriver interface
  
class RemoteWebDriver 
	* All methods of WebDriver and WebElement interfaces are implemented here. Along with that some addtional test methods are also there
	
class ChromeDrive or FirefoxDriver or EdgeDriver
	* Browser specific methods are written in the classes
	

public interface WebElement extends SearchContext, TakesScreenshot;
	
WebElement methods();

  void click();
  void submit();
  void sendKeys(CharSequence... keysToSend);
  void clear();
  String getTagName();
  default @Nullable String getDomProperty(String name) {
    throw new UnsupportedOperationException("getDomProperty");
  }
  default @Nullable String getAriaRole() {
    throw new UnsupportedOperationException("getAriaRole");
  }
  default @Nullable String getAccessibleName() {
    throw new UnsupportedOperationException("getAccessibleName");
  }
  boolean isSelected();
  boolean isEnabled();
  boolean isDisplayed();
  String getText();
  @Override
  List<WebElement> findElements(By by);
  @Override
  WebElement findElement(By by);
  default SearchContext getShadowRoot() {
    throw new UnsupportedOperationException("getShadowRoot");
  }
  Point getLocation();
  Dimension getSize();
  Rectangle getRect();
  String getCssValue(String propertyName);

  &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
  
Window Handle in Selenium

session id - driver 
window handle - id unique is for each window opened during above session. its never going to be a duplicate value.

By using a driver's, if we open one or more browser window,
	each window will be assigned with a ID and its called window handle. 
	
Where is the driver's "focus" would be.

String getWindowHandle();// for a single window
Set<string> getWindowHandles(); // for multiple windows

switching to a newly opened window when only one new window is opened.


*************************************************************************************  
Day 57 (24/05/2024)

1) How to add Selenium to our project
	* as a dependency
	* https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
	* Add dependency to your project's pom.xml (learn and know how the dependency is added to your project)
	* Update the maven project
	* confirm the dependency is visible on the project under Maven dependencies
	
2) Writing a first Selenium code 
	* How do you launch the Amazon application in Chrome browser? 
	* Manually
		* Run chrome.exe file by the tester or user
		* Enter the url
	* Through Automation 
		* ChromeDriver.exe need to be run by WebDriver
		* How do WebDriver know where is my ChromeDriver.exe?
			* We need to give the location of ChromeDriver.exe file to the WebDriver 
			* We need to download it and add it in your project
		* What is the check here? 
			* Your installed Chrome browser version should be aligned with ChromeDriver version
			* Else you will get compatibility issue.
				
			

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Why do we create object as below

WebDriver driver = new ChromeDriver();  //here Overriding concept will be applied. 
When we call, WebDriver methods will show, but while  we run methods from ChromeDriver or its parent class method will run.

why not 

ChromeDriver driver = new ChromeDriver();


System.setProperty("webdriver.chrome.driver", "C:\\Users\\LENOVO\\git\\SaraswathyJavaProject\\drivers\\chromedriver_107.exe");
ChromeDriver driver = new ChromeDriver();


But we do not need to create object like above.
Because it will cause a problem when we need to open different browser in single driver instance

To avoid this we keep WebDriver interface as reference for object

WebDriver interface and ChromeDriver/FirefoxDriver/SafariDriver/EdgeDriver are connected through RemoteWebDriver class

All the methods in WebDriver interface are implemented in RemoteWebDriver.

All browser drivers are extended to RemoteWebDriver

WebDriver driver; 
driver = new ChromeDriver();
driver = new FirefoxDriver();

{ 

ChromeDriver driver = new ChromeDriver();

code

driver = new EdgeDriver();

EdgeDriver driver1 = new EdgeDriver();

WebDriver driver = new ChromeDriver();

driver = new EdgeDriver();
driver = new FireDriver();


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

WebDriver methods - practice



public interface WebDriver  {
Options manage();
}

interface Options {

    void addCookie(Cookie cookie);
    void deleteCookieNamed(String name);
    void deleteCookie(Cookie cookie);
    void deleteAllCookies();
    Set<Cookie> getCookies();
    @Nullable Cookie getCookieNamed(String name);
    Timeouts timeouts();
    Window window();
}

interface Window {
    Dimension getSize();
    void setSize(Dimension targetSize);
    Point getPosition();
    void setPosition(Point targetPosition);
    void maximize();
    void minimize();
    void fullscreen();
}

interface Timeouts {
  default Timeouts implicitlyWait(Duration duration) {
  }
 
 
implicitlyWait - in Selenium
	* In Selenium, implicitlyWait() is used to tell WebDriver to wait for a certain amount of time 
	when trying to find an element if it is not immediately available.
	
*****************************************************************************

Day 58 (25/05/2024)	
	
Locators in Selenium 

 We find elements in a page using locators 
  
1) id
2) name
3) className
4) tagName
5) linkText
6) partialLinkText
7) xpath
8) css

Locators in selenium - 
	locator value should not be duplicate. must be unique
		means, id = "sathya" should be present only once

id 
	* most preferred 
	* do not use if it has numbers in it. 
	* id = "abc123"; - DO NOT USE
		* if we reload again, the id value may change to "abc114"
name
className
	* with more spaces 
tagName
linkText
partialLinkText
CSS selector
xpath -XML path


id, name, className(class) - when these values are unique we can use them directly. 
When they are not unique, we use either xpath or CSS

findElement(By.id(""));
findElement(By.name(""));
findElement(By.class(""));
findElement(By.linkText("selenium"));
findElement(By.linkText("Testing Frameworks"));
findElement(By.linkText("Logging Frameworks"));
findElement(By.parialLinkText("Frameworks"));


	By obj1 = By.className("");
		WebElement ele = driver.findElement(obj1);
		ele.click();
		
		driver.findElement(By.className("")).click();;
		
		driver.findElement(By.id("")).sendKeys();

* when id, name, className attributes are present in an element tag but they not unique, then we go to xpath 
* When id, name, className attributes are not present inside an element's tag, then also we use xpath

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

CSS Selector

Examples of CSS Selectors
What You Want to Select			CSS Selector Example								Explanation
Element by tag						div											Selects all <div> elements
Element by class					.className									Selects all elements with that class
Element by ID						#elementId									Selects the element with that ID
Nested element						div > span									Selects <span> directly inside <div>
Attribute value						input[name='username']						Input with a name attribute = 'username'
Partial attribute value				a[href*='login']							Link where href contains "login"
Multiple classes					div.class1.class2							Element with both class1 and class2

*****************************************************************************

Day 59 (27/05/2024)

findElements method 

*****************************************************************************

Day 60 (28/05/2024)

Window Handling! 

Lets consider 3 window - WinA, WinB, WinC

1. Get window handle of the current window - WinA 
2. do any actions and open many the windows
3. user getWindowHandles() method to get all window handles
4. Remember that, your or your driver's focus is still on WinA, even though you see any other window on your screen.
5. Use for loop or iterator to iterate between the window handles.
6. To switch to each window handle (window) user switchTo().window(winHandle) method
7. Once you switch to a window get its title
8. if the title you get through iteration, matches your expected title then end the for loop.


Case study:
1. Get window handle of the current window - WinA - parent window
2. do any actions and open another the window
3. user getWindowHandles() method to get all window handles
4. Remember that, your or your driver's focus is still on WinA, even though you see any other window on your screen.
5. Use for loop or iterator to iterate between the window handles.
6. if the window handle is not parent window's handle then switch to that window
7. Now you are in the child window
8. use driver.close() and close the child window
9. Now, where my driver's focus will be?

*****************************************************************************

Day 61 (29/05/2024)

Window Handling!  - Class 2


  